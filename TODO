LaTeX
=====

I'm starting to see ways that Treesitter + Telescope can help with my latex
writing. I have started implementing these in nvim-latex
- Bibtex: 
    - [X] use a treesitter query to find the included bibtex file
        - entry->key  gives the possible keys for citations
    - [X] query that file for all the possible citation keywords
    - [X] have a telescope picker that inserts a citation for me from the list
        - [ ] if in citation node, then just add selected
        - [X] if outside citation node, create a new citation with all selected
- Cross References:
    - [ ] The LSP can get all the \labels as "Symbols"
        - This doesn't seem to include citations, but does include unlabeled
          sections
    - [X] treesitter can find all labels
        - (label_definition name: (word))
        - (label_reference label: (word))
    - [X] use telescope to select the reference that I want.

Another plugin to make: Outline viewer
This has started to be implemented in nvim-latex.
- Create a scratch buffer (`nvim_create_buf(false, true)`) to store the outline
- Name the buffer "outline"
- Open it in a new window beside the document
- [X] Use either treesitter or LSP to get the chapter and section headings
- Optional:
    - [ ] highlighting
    - [ ] include the labels
    - [ ] some kind of preview of the contents (first comment)
    - [ ] sync the scrolling: if cursor is in section, highlight that line
    - [ ] navigate to section from outline window

Some additional things that will help:
- text objects for finding equations (not just environments, but each line in an
  `align` as well
- Find the unlabelled sections, and suggest labels
- snippets for some common things: \left \right, frac, etc
- use LSP and/or the aux file to find all errors and warnings efficiently
- synctex navigation for skim and zathura

Telescope
=========

Set up telescope functions with the <leader>t lead-in
- [ ] s : grep search
- [ ] add hotkey to open in split or tab (maybe <C-v>, <C-h>, <C-t> )
    - this seems to be done already, with these keys
- [ ] allow file creation from the find_files builtin

- [ ] Adjust the layout rules so that there are always a few results shown in that pane

LSP
===

- [ ] figure out why lua doesn't work right
- [ ] add hotkeys for some of the telescope lsp builtins

Diary
=====

I want to set up a nice diary flow. This would include:

- [X] Telescope picker to find/select files in the $diary directory
- [X] Shell script/alias to quickly create/edit a diary file
- [ ] Markdown folding (via tree-sitter?)

Color
=====

Probably simplify my colorscheme file. It feels too gargantuan to manage.

Git workflow
------------

I find that staging through status is cludgy, especially when there are a lot of
untracked files in my worktree. Instead, I have started to do:

:Git add %
:Git commit -m "message"

Some shortcut sequences for those could be very useful

Tree-Sitter
===========

I mostly installed this for folding, but the markdown document tree isn't
arranged well. This is because headings do not contain the following contents
in their tree.

To figure it out:
  - Can we change the grammar to add a tree structure to the document?
    - This is the way the latex parser works, and it folds really well
  - Possibly use a custom folding function and queries to do it
  - treesitter-highlight seems a bit sketchy

NVIM Development
================

I found that repeatedly typing in `:lua print(___)` over and over in the vim
command prompt is a pain. I'd like to be able to enter lua code directly.
    - Seems like nvim-luadev will do it

    - [ ] Configure maps for nvim-luadev 

Really neat would be stuff like "run selection" and log the output to a scratch
buffer.
    - nvim-luadev does this with <Plug>(Luadev-Run)

Also, some kind of REPL is always useful.
    - nvim-luapad was close to this but re-evaluates the buffer too much

For actually printing tables, `vim.inspect()` is useful

vim:filetype=markdown
